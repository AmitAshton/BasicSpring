Index: src/main/java/com/handson/basic/util/Strings.java
===================================================================
diff --git a/src/main/java/com/handson/basic/util/Strings.java b/src/main/java/com/handson/basic/util/Strings.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/handson/basic/util/Strings.java	
@@ -0,0 +1,8 @@
+package com.handson.basic.util;
+
+public class Strings {
+
+    public static String likeLowerOrNull(String str) {
+        return str != null ? "%" + str.toLowerCase() + "%" : null;
+    }
+}
Index: src/main/java/com/handson/basic/util/FPS.java
===================================================================
diff --git a/src/main/java/com/handson/basic/util/FPS.java b/src/main/java/com/handson/basic/util/FPS.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/handson/basic/util/FPS.java	
@@ -0,0 +1,211 @@
+package com.handson.basic.util;
+
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.handson.basic.model.Pagination;
+import com.handson.basic.model.PaginationAndList;
+import com.handson.basic.model.SortDirection;
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.sql.Timestamp;
+import java.text.SimpleDateFormat;
+import java.util.*;
+import java.util.stream.Collectors;
+
+public class FPS {
+    private List<FPSField> select = new ArrayList<>();
+    private List<String> from = new ArrayList<>();
+    private List<String> joins = new ArrayList<>();
+    private List<FPSCondition> conditions = new ArrayList<>();
+    private String sortField;
+    private SortDirection sortDirection;
+    private Integer page;
+    private Integer count;
+    private Class itemClass;
+
+
+    TimeZone utcTz = TimeZone.getTimeZone("UTC");
+    SimpleDateFormat isoDf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'"); // Quoted "Z" to indicate UTC, no timezone offset
+    public FPS() {
+        super();
+        isoDf.setTimeZone(utcTz);
+    }
+
+    public PaginationAndList exec(EntityManager em, ObjectMapper om) throws JsonProcessingException {
+        Query qrySelect = em.createNativeQuery(getSelectSql(), itemClass);
+        Query qryCount = em.createNativeQuery(getCountSql());
+        conditions.forEach(x-> {
+            if (x.getValue() != null) {
+                qrySelect.setParameter(x.getParameterName(), x.getValue());
+                qryCount.setParameter(x.getParameterName(), x.getValue());
+            }
+        });
+        List rows =  qrySelect.getResultList();
+        BigInteger total = (BigInteger) qryCount.getSingleResult();
+        return PaginationAndList.of(Pagination.of(page, (total.intValue() / count) + 1, total.intValue()) ,rows);
+    }
+
+    private String getSelectSql() {
+        String fieldsSql = " select " + select.stream().map(f -> f.getField() + " " + f.getAlias()) .collect(Collectors.joining(","));
+        String fromSql = getFromSql();
+        String whereSql = getWhereSql();
+        String orderSql = "";
+        if (sortField != null) {
+            orderSql = " order by " + sortField + (SortDirection.desc.equals(sortDirection) ? " desc " : "");
+        }
+        String limitSql = "";
+        if (page != null || count != null) {
+            if (count != null) limitSql += " limit " + count;
+            if (page != null) limitSql += " offset " + (page - 1) * count;
+        }
+        return fieldsSql + fromSql + whereSql + orderSql + limitSql;
+    }
+
+    private String getWhereSql() {
+        String whereSql = " where " + joins.stream().collect(Collectors.joining(" and "));
+        if (joins.size() > 0) whereSql += " and ";
+        whereSql += conditions.stream().filter(x -> x.getValue() != null).map(y -> y.getCondition()).collect(Collectors.joining(" and "));
+        if ("where".equals(whereSql.trim())) whereSql = "";
+        return whereSql;
+    }
+
+    private String getFromSql() {
+        return " from " + from.stream().collect(Collectors.joining(","));
+    }
+
+    private String getCountSql() {
+        String fieldsSql = " select count(*)";
+        String fromSql = getFromSql();
+        String whereSql = getWhereSql();
+        return fieldsSql + fromSql + whereSql ;
+    }
+
+    private boolean isaBoolean(Object o) {
+        return o instanceof Boolean;
+    }
+
+    private boolean isDate(Object o) {
+        return o instanceof Date  || o instanceof java.sql.Date || o instanceof Timestamp;
+    }
+
+    private boolean isNumeric(Object o) {
+        return o instanceof Integer || o instanceof Long || o instanceof Double || o instanceof BigInteger
+                || o instanceof BigDecimal || o instanceof Float;
+    }
+
+    public List<FPSField> getSelect() {
+        return select;
+    }
+
+    public List<String> getFrom() {
+        return from;
+    }
+
+    public List<String> getJoins() {
+        return joins;
+    }
+
+    public List<FPSCondition> getConditions() {
+        return conditions;
+    }
+
+    public String getSortField() {
+        return sortField;
+    }
+
+    public SortDirection getSortDirection() {
+        return sortDirection;
+    }
+
+    public Integer getPage() {
+        return page;
+    }
+
+    public Integer getCount() {
+        return count;
+    }
+
+
+    public static final class FPSBuilder {
+        private List<FPSField> select = new ArrayList<>();
+        private List<String> from = new ArrayList<>();
+        private List<String> joins = new ArrayList<>();
+        private List<FPSCondition> conditions = new ArrayList<>();
+        private String sortField;
+        private SortDirection sortDirection;
+        private Integer page;
+        private Integer count;
+        private Class itemClass;
+
+        private FPSBuilder() {
+        }
+
+        public static FPSBuilder aFPS() {
+            return new FPSBuilder();
+        }
+
+        public FPSBuilder select(List<FPSField> select) {
+            this.select = select;
+            return this;
+        }
+
+        public FPSBuilder from(List<String> from) {
+            this.from = from;
+            return this;
+        }
+
+        public FPSBuilder joins(List<String> joins) {
+            this.joins = joins;
+            return this;
+        }
+
+        public FPSBuilder conditions(List<FPSCondition> conditions) {
+            this.conditions = conditions;
+            return this;
+        }
+
+        public FPSBuilder sortField(String sortField) {
+            this.sortField = sortField;
+            return this;
+        }
+
+        public FPSBuilder sortDirection(SortDirection sortDirection) {
+            this.sortDirection = sortDirection;
+            return this;
+        }
+
+        public FPSBuilder page(Integer page) {
+            this.page = page;
+            return this;
+        }
+
+        public FPSBuilder count(Integer count) {
+            this.count = count;
+            return this;
+        }
+
+        public FPSBuilder itemClass(Class itemClass) {
+            this.itemClass = itemClass;
+            return this;
+        }
+
+
+        public FPS build() {
+            FPS fPS = new FPS();
+            fPS.conditions = this.conditions;
+            fPS.page = this.page;
+            fPS.itemClass = this.itemClass;
+            fPS.count = this.count;
+            fPS.sortDirection = this.sortDirection;
+            fPS.select = this.select;
+            fPS.from = this.from;
+            fPS.joins = this.joins;
+            fPS.sortField = this.sortField;
+            return fPS;
+        }
+    }
+}
Index: src/main/java/com/handson/basic/model/SortDirection.java
===================================================================
diff --git a/src/main/java/com/handson/basic/model/SortDirection.java b/src/main/java/com/handson/basic/model/SortDirection.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/handson/basic/model/SortDirection.java	
@@ -0,0 +1,5 @@
+package com.handson.basic.model;
+
+public enum SortDirection {
+    asc,desc
+}
Index: src/main/java/com/handson/basic/util/FPSField.java
===================================================================
diff --git a/src/main/java/com/handson/basic/util/FPSField.java b/src/main/java/com/handson/basic/util/FPSField.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/handson/basic/util/FPSField.java	
@@ -0,0 +1,44 @@
+package com.handson.basic.util;
+
+
+public class FPSField {
+    String field;
+    String alias;
+
+    public String getField() {
+        return field;
+    }
+
+    public String getAlias() {
+        return alias;
+    }
+
+    public static final class FPSFieldBuilder {
+        String field;
+        String alias;
+
+        private FPSFieldBuilder() {
+        }
+
+        public static FPSFieldBuilder aFPSField() {
+            return new FPSFieldBuilder();
+        }
+
+        public FPSFieldBuilder field(String field) {
+            this.field = field;
+            return this;
+        }
+
+        public FPSFieldBuilder alias(String alias) {
+            this.alias = alias;
+            return this;
+        }
+
+        public FPSField build() {
+            FPSField fPSField = new FPSField();
+            fPSField.field = this.field;
+            fPSField.alias = this.alias;
+            return fPSField;
+        }
+    }
+}
Index: src/main/java/com/handson/basic/util/FPSCondition.java
===================================================================
diff --git a/src/main/java/com/handson/basic/util/FPSCondition.java b/src/main/java/com/handson/basic/util/FPSCondition.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/handson/basic/util/FPSCondition.java	
@@ -0,0 +1,57 @@
+package com.handson.basic.util;
+
+
+public class FPSCondition {
+    private String condition;
+    private String parameterName;
+    private Object value;
+
+    public String getCondition() {
+        return condition;
+    }
+
+    public String getParameterName() {
+        return parameterName;
+    }
+
+    public Object getValue() {
+        return value;
+    }
+
+
+    public static final class FPSConditionBuilder {
+        private String condition;
+        private String parameterName;
+        private Object value;
+
+        private FPSConditionBuilder() {
+        }
+
+        public static FPSConditionBuilder aFPSCondition() {
+            return new FPSConditionBuilder();
+        }
+
+        public FPSConditionBuilder condition(String condition) {
+            this.condition = condition;
+            return this;
+        }
+
+        public FPSConditionBuilder parameterName(String parameterName) {
+            this.parameterName = parameterName;
+            return this;
+        }
+
+        public FPSConditionBuilder value(Object value) {
+            this.value = value;
+            return this;
+        }
+
+        public FPSCondition build() {
+            FPSCondition fPSCondition = new FPSCondition();
+            fPSCondition.value = this.value;
+            fPSCondition.condition = this.condition;
+            fPSCondition.parameterName = this.parameterName;
+            return fPSCondition;
+        }
+    }
+}
Index: src/main/java/com/handson/basic/model/PaginationAndList.java
===================================================================
diff --git a/src/main/java/com/handson/basic/model/PaginationAndList.java b/src/main/java/com/handson/basic/model/PaginationAndList.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/handson/basic/model/PaginationAndList.java	
@@ -0,0 +1,47 @@
+package com.handson.basic.model;
+
+
+import java.util.List;
+import java.util.Objects;
+
+public class PaginationAndList {
+    private Pagination pagination;
+    private List data;
+
+    public PaginationAndList() {
+    }
+
+    public Pagination getPagination() {
+        return this.pagination;
+    }
+
+    public List getData() {
+        return this.data;
+    }
+
+    public static PaginationAndList of(Pagination pagination, List data) {
+        PaginationAndList res = new PaginationAndList();
+        res.pagination = pagination;
+        res.data = data;
+        return res;
+    }
+
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        } else if (o != null && this.getClass() == o.getClass()) {
+            PaginationAndList that = (PaginationAndList)o;
+            return Objects.equals(this.pagination, that.pagination) && Objects.equals(this.data, that.data);
+        } else {
+            return false;
+        }
+    }
+
+    public int hashCode() {
+        return Objects.hash(new Object[]{this.pagination, this.data});
+    }
+
+    public String toString() {
+        return "PaginationAndList{pagination=" + this.pagination + ", data=" + this.data + "}";
+    }
+}
Index: src/main/java/com/handson/basic/model/Pagination.java
===================================================================
diff --git a/src/main/java/com/handson/basic/model/Pagination.java b/src/main/java/com/handson/basic/model/Pagination.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/handson/basic/model/Pagination.java	
@@ -0,0 +1,52 @@
+package com.handson.basic.model;
+
+
+import java.util.Objects;
+
+public class Pagination {
+    private Integer page;
+    private Integer ofPage;
+    private Integer count;
+
+    public Pagination() {
+    }
+
+    public Integer getPage() {
+        return this.page;
+    }
+
+    public Integer getOfPage() {
+        return this.ofPage;
+    }
+
+    public Integer getCount() {
+        return this.count;
+    }
+
+    public static Pagination of(Integer page, Integer ofPage, Integer count) {
+        Pagination res = new Pagination();
+        res.page = page;
+        res.ofPage = ofPage;
+        res.count = count;
+        return res;
+    }
+
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        } else if (o != null && this.getClass() == o.getClass()) {
+            Pagination that = (Pagination)o;
+            return Objects.equals(this.page, that.page) && Objects.equals(this.ofPage, that.ofPage) && Objects.equals(this.count, that.count);
+        } else {
+            return false;
+        }
+    }
+
+    public int hashCode() {
+        return Objects.hash(new Object[]{this.page, this.ofPage, this.count});
+    }
+
+    public String toString() {
+        return "Pagination{page=" + this.page + ", ofPage=" + this.ofPage + ", count=" + this.count + "}";
+    }
+}
